---
format: pdf
editor: visual
lang: "es"
header-includes:
  - \usepackage{ragged2e}
  - \usepackage{hyperref}
---

\Centering

\vspace{3cm}

\pagenumbering{gobble}

\vspace{5cm}

\large

LICENCIATURA EN ESTADÍSTICA

\vspace{1cm}

```{=tex}
\large
\Huge
```
"Análisis del método Metropolis-Hastings en una y dos dimensiones" \Huge \newline \vspace{0.3cm}

\normalsize

Trabajo Práctico 2 \vspace{1cm}

```{=tex}
\begin{center}

\end{center}
\vspace{2cm}
```
Autores: Tomás Anderson - Alejo Vaschetti - Manuel Moresi

Docentes: Ignacio Evangelista - Tomás Capretto

08/05/2024 \normalsize

```{=tex}
\newpage
\hypersetup{linkcolor = black}
\tableofcontents
```
```{=tex}
\newpage
\pagenumbering{arabic}
```
```{=tex}
\RaggedRight
\newpage
```
```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(tidyverse)
library(ggplot2)
library(rstan)
library(gridExtra)
```

# Prologo: El comienzo de Guido, el fin de Sergio

Era una pacífica madrugada de miércoles en Córdoba, cuando suena un teléfono en la cercanía. Letárgico, luego de dejar sonando unos segundos el celular, Guido abre los ojos desganadamente y comprueba quién es la persona que está irrumpiendo en su sueño. "-¿El capitán?", piensa Guido dudosamente. Al atender el móvil se escucha, "-Llegó la hora de tu primer trabajo Guido. Preparate que en 10 minutos te pasan a buscar para ir a Salsipuedes." Como si todavía no hubiese entendido qué está pasando, lentamente Guido salió de su lecho para vestirse con su preciado nuevo uniforme de la policía científica de Córdoba, recién cuando el vehículo llegó, pudo Guido entender lo que había pasado. "-¡Por fin! Mi primer trabajo.", pensó Guido alegremente. Pero no estaba preparado para afrontar lo que se iba a encontrar.

## Introducción

Se suele decir que la muerte es certera pero... ¿es precisa? Acompaña a Guido, un estudiante de estadística, que como parte de su nuevo trabajo tiene que estimar a qué hora se produjo un asesinato en la ciudad de Salsipuedes con la información que posee.

# Capítulo 1: Elemental mi querido Guido

Al llegar, Guido presenció el caos de la escena instantáneamente. Muebles volcados y destrozados. Utensilios de cocina desparramados y manchados. La brisa matutina se abría paso por los vidrios estallados y la débil luz de los móviles policiales dejaban ver que el cuerpo de Sergio Contreras yacía en un charco de sangre hacia un extremo del salón. Sorprendentemente, recordando lo que estudió, salió de su estupor y fue a preguntar los hechos del caso.

## Medicina forense

Uno de los métodos que se utiliza en la medicina forense para poder estimar la hora del fallecimiento, es el estudio de la temperatura corporal. Cuando alguien fallece, la temperatura del cuerpo irá disminuyendo hasta que este llegue a un equilibrio térmico con la temperatura ambiente. Dicho proceso se lo conoce como *enfriamiento postmortem* o *algor mortis*. Pero el ritmo al que el cuerpo pierde calor no es constante. Dicho cambio es una ecuación diferencial que satisface la siguiente ley:

$$\frac{\mathrm{d}T(t)}{\mathrm{d}t} = r [T_{\text{amb}} - T(t)]$$

donde $T_{amb}$ es la temperatura ambiente, $r$ una constante positiva que indica la rapidez del *algor mortis* y $T(t)$ es la función que describe la temperatura del cuerpo en función del tiempo, donde $t=0$ ces el momento de la muerte de la persona.

Una función que satisface la ecuación diferencial es:

$$T(t) = T_{amb}+(T_i-T_{amb})e^{-rt}$$ Donde $T_i$ es la temperatura inicial del cuerpo. Dicha relación se demuestra de la siguiente manera: $$\frac{dT(t)}{dt} =-r(T_i-T_{amb})e^{-rt}$$ $$\frac{dT(t)}{dt} =-r(T_i-T_{amb})e^{-rt}+rT_{amb}-rT_{amb}$$ $$\frac{dT(t)}{dt} =-r(T_{amb}+(T_i-T_{amb})e^{-rt})+rT_{amb}$$ $$\frac{dT(t)}{dt} =-rT(t)+rT_{amb}$$ $$\frac{dT(t)}{dt} =r(T_{amb}-T(t))$$

Si $T_{amb}=23$ y $T_{ini}=37$ la forma de la función es la siguiente:

```{r, echo = FALSE, message = FALSE, warning = FALSE, fig.cap = "Temperatura de un cuerpo según el tiempo desde la muerte"}
T_fun = function(t_amb, t_i, r, t) t_amb + (t_i - t_amb) * exp(-r * t) 
T_valores_1 = T_fun(23, 37, .1, seq(0,75,1))
T_valores_2 = T_fun(23, 37, .3, seq(0,75,1))
datos_T = data.frame(x = seq(0,75,1), y = c(T_valores_1, T_valores_2), r = rep(c("0.1", "0.3"), each = 76)) 

ggplot(datos_T) + geom_line(aes(x = x, y = y, color = r)) + scale_y_continuous(name = "T(t)") + scale_x_continuous(name = "t") +
  theme_bw()
```

Para simplificar el problema, no se utiliza la función $T(t)$ sino $ln(T(t)-T_{amb})$, ya que esta tiene forma lineal. $$
\begin{array}{lrrr}
 T(t)-T_{amb} = T_{diff}e^{-rt} & Donde: & T_{diff} = T_i-T_{amb}
\end{array}
$$

$$Y(t)=ln(T(t)-T_{amb}) = ln(T_{diff}e^{-rt}) = ln(T_{diff})+ln(e^{-rt}) = ln(T_{diff})-rt$$

Dicha función está representada por la ecuación de una recta $y=\beta_0+\beta_1*x$, donde $\beta_0$ es el logaritmo natural de la diferencia de temperatura del cuerpo inicial y de la ambiente. $\beta_1$ representa la velocidad de cambio de $Y(t)$.

```{r, echo = FALSE, fig.cap = "Transformación de la temperatura de un cuerpo según el tiempo desde la muerte"}
ln_T_valores_1 = log(T_valores_1-23)
ln_T_valores_2 = log(T_valores_2-23)
datos_ln_T = data.frame(x = seq(0,75,1), y = c(ln_T_valores_1, ln_T_valores_2), r = rep(c("0.1", "0.3"), each = 76)) 

ggplot(datos_ln_T) + geom_line(aes(x = x, y = y, color = r)) + scale_y_continuous(name = "Y(t)") + scale_x_continuous(name = "t") +
  theme_bw()
```

# Capítulo 2: Luego de la muerte, ¿Qué ocurre?

Luego de que Martina, una policía que estaba en la escena del crimen, le informe a Guido que a las 5:33 am recibieron una llamada de una vecina sobre ruidos extraños, el joven estadístico le pregunta "-¿Y a qué hora llegaron?". "-Llegamos a las 5:52 y en 8 minutos concluimos la inspección de la casa. En este mismo estado la encontramos.". Sin poder continuar la conversación, el médico del equipo llama a Guido y le cuenta que la temperatura del cuerpo de Sergio es de 32.8 ºC. "-¿Necesitás alguna información más Guido?". Sin mirarle a los ojos, Guido saca su celular, observa la hora, busca la temperatura ambiente actual y dice expectante "-No te preocupés doc, ya tengo todo lo que necesito". Pero Guido, ¿Tiene todo lo que necesita?

## Distribuciones a *priori*

Fundamentalmente, la temperatura del cuerpo de Sergio a través del tiempo luego de fallecer depende de 4 aspectos:

-   La temperatura del cuerpo al momento de morir (ºC).
-   La temperatura ambiente (ºC).
-   La velocidad en la que la temperatura del cuerpo cae.
-   A qué hora falleció.

Además, hay que tener en cuenta el error de medición que pueda tener el equipo que se use para medir la temperatura.

Pero se quiere que el modelo pueda expresarse en función de una recta, por lo que se trabaja con el logaritmo natural de la diferencia de temperatura del cuerpo y la temperatura del ambiente.

Esto se explicita en el siguiente modelo:

$$Y_i|\mu_i,\sigma \sim Normal(\mu_i,\sigma)$$ $$\mu_i = \beta_0 + \beta_1  t_i$$

Donde:

$$Y_i = ln(T(t_i)-T_{amb})$$ $$\beta_0 = ln(T_{ini}-T_{amb}) = ln(T_{diff})$$ $$\beta_1 = -r$$

Y $t_i$ es el i-ésimo tiempo en horas que pasó desde que Sergio murió.

Se conoce la temperatura ambiente, siendo $T_{amb}=22$ ºC. Los valores exactos de los demás parámetros se desconocen, pero se tiene cierta información sobre ellos.

## $\boldsymbol{\beta_0}$: Logaritmo natural de la diferencia entre la temperatura inicial del cuerpo y la ambiente

Se sabe que la temperatura del cuerpo de una persona sana varía entre 36 y 37.5 ºC, por lo que $\beta_0 = ln(T_{diff})$ tiene que estar entre $ln(36 - 22)=$ `r round(log(36-22),3)` y $ln(37.5 - 22)=$ `r round(log(37.5-22),3)`. Una distribución que representa lo requerido es:

```{r, echo = FALSE}
beta0_sigma = (log(37.5-22)-log(36-22))/6
beta0_mu = log(36.75-22)
```

$$\beta_0 \sim Normal(2.69,0.017)$$

```{r, echo = FALSE, fig.cap = "Distribución a priori de beta 0"}
seq_beta0 = seq(log(36-22),log(37.5-22),length.out = 1000)
df_beta0 = data.frame(y = dnorm(seq_beta0, 2.69, 0.017), x = seq_beta0)
ggplot(df_beta0) + geom_line(aes(x = x, y = y)) + scale_x_continuous(name = "Beta0", breaks = round(seq(log(36-22),log(37.5-22),length.out = 7),3)) + scale_y_continuous(name = "Densidad") +
  theme_bw()

# norm_t = data.frame(x = exp(rnorm(100000, 2.69, 0.017))+22)
# ggplot(norm_t)+ geom_density(aes(x = x, y = after_stat(density)), color = "red", linewidth = 1)
```

## $\boldsymbol{\beta_1}$: Velocidad en la que la temperatura del cuerpo cae

La velocidad a la que decrece la temperatura de los cuerpos humanos cuando mueren es un tema ya estudiado en la medicina forense.

"Greggio y Valtorta(1998) han demostrado que el descenso de la temperatura corporal post-mortem se realiza mediante un *plateau* inicial de una 3-4 horas de duración, con una caída promedio de 0.5 ºC por hora, un decrecimiento lineal que sobrepasa las 12 hs de la muerte con una pérdida promedio de 1 ºC cada hora y luego un *plateau* final, con descenso lento, de 0,5º o 0,25º por hora hasta igualar a la temperatura ambiente." Fraraccio, J(2021). *Medicina forense contemporanea*. Dosyuna ediciones argentinas.

```{r, echo = FALSE}
r_seq = seq(0.1,0.4,.001)
t_ini = seq(36, 37.5, 0.1)
T_r = numeric()
T_r_label = numeric()
contador = 0
for (i in r_seq) {
  for (j in t_ini) {
    contador = contador + 1
    T_r_label[contador] = i
    T_r[contador] = T_fun(22, j, i, 22)
  }
}
r_li = unique(T_r_label[which(T_r > 22.02 & T_r <= 22.2)])[1]
r_ls = unique(T_r_label[which(T_r > 22.02 & T_r <= 22.2)])[109]

r_mu = -(r_ls+r_li)/2

r_sigma = (r_ls-r_li)/6
```

Basándose en este extracto, se tarda aproximadamente 22 horas en que un cuerpo llegue a una temperatura ambiente de 22 ºC, por lo que se calcula el valor de $T(t)$ en $t=22$ para varios valores de $\beta_1=-r$ y temperaturas iniciales del cuerpo. Los $\beta_1$ que se acercan a 22 ºC a las 22 horas están entre `r r_li` y `r r_ls`.

Entonces se llega a que:

$$\beta_1 \sim Normal(-0.248,0.018)$$

```{r, echo = FALSE, fig.cap = "Distribución a priori de beta 1"}
seq_beta1 = seq(-0.19,-0.31,length.out = 1000)
df_beta1 = data.frame(y = dnorm(seq_beta1, r_mu, r_sigma), x = seq_beta1)
ggplot(df_beta1) + geom_line(aes(x = x, y = y)) + scale_x_continuous(name = "Beta1", breaks = round(seq(r_mu-3*r_sigma,r_mu+3*r_sigma,length.out = 7),3))  + scale_y_continuous(name = "Densidad") + theme_bw()
```

## $\boldsymbol{h_m}$: Horario de la muerte

Como $t_i$ depende de cuándo Sergio murió, y no se tiene dicha información, se le debe asignar una distribución a *priori*. Entonces se puede separar $t_i$ en $t_i = h_i-h_m$.

Donde $h_m$ es la hora en que se murió Sergio y $h_i$ es la hora de la i-ésima observación.

Como hubo ruidos extraños a las 5:33 tiene sentido pensar que la muerte pudo haber ocurrido cerca de esa hora, y además no pudo haber ocurrido luego de las 5:52 ya que la policía lo hubiera notado. Entonces se plantea la siguiente distribución a *priori*:

$$h_m \sim (-1)*Gamma(5,0.1)+5.883$$

```{r, echo = FALSE, fig.cap = "Distribución a priori de la hora de muerte"}
seq_h_m = seq(0,1.5,length.out = 1000)
df_h_m = data.frame(y = dgamma(seq_h_m, shape = 5, scale = 0.1), x = -1 * seq_h_m + 5.883)
ggplot(df_h_m) + geom_line(aes(x = x, y = y)) + 
  scale_x_continuous(name = "Hora de la muerte", breaks = c(4.5, 5, 5.5, 5.883),
                     labels = c("4:30", "5:00", "5:30", "5:52"))  + scale_y_continuous(name = "Densidad") +
  theme_bw()
```

## $\boldsymbol{\sigma}$: Error de medición

Al investigar sobre el error de medición para la temperatura, se encuentra que el error máximo de un termómetro es de 0.7 ºC, entonces se calcula la diferencia entre el logaritmo natural de una temperatura $T$ y la temperatura con su error máximo: $$ln(T+0.7)-ln(T) = ln(\frac{T+0.7}{T}) = ln(1+\frac{0.7}{T})$$ Y esta expresión será máxima cuando T sea mínimo, es decir, $T=22$. Entonces,

```{r, echo = FALSE}
sigma_max = log(1+0.7/22)
```

$$ln(1+\frac{0.7}{22}) \approx 0.03 $$ Por lo tanto, el *prior* resultante es:

$$\sigma \sim Normal_+(0,0.01)$$

```{r, echo = FALSE, fig.cap = "Distribución a priori del error de medición"}
seq_sigma = seq(-0.033,0.033,length.out = 1000)
df_sigma = data.frame(y = 2*abs(dnorm(seq_sigma, 0, 0.01)), x = abs(seq_sigma))
ggplot(df_sigma) + geom_line(aes(x = x, y = y)) + scale_x_continuous(name = "Sigma", breaks = round(seq(0,sigma_max,length.out = 4),3))  + scale_y_continuous(name = "Densidad") +
  theme_bw()
```

Donde dichos valores representan el error de medición en términos del porcentaje de la temperatura medida.

## Descenso de la temperatura a *priori*

Una vez definidas las distribuciones a *priori* de todos los parámetros de los que depende el cambio de temperatura del cuerpo a través del tiempo, esta se puede graficar para determinar si lo que uno supone es razonable.

```{r, echo = FALSE, fig.cap = "Distribución a priori de la temperatura del cuerpo de Sergio"}
set.seed(1997)
beta0 = rnorm(1000, mean = 2.69, sd = 0.017)
beta1 = rnorm(1000, mean = -0.248, sd = 0.018)
varia = abs(rnorm(1000, mean = 0, sd = 0.01))
x = -rgamma(1000, shape = 5, scale = 0.1) + 5.883
prior = data.frame(beta0, beta1, x)

grid <- seq(4, 24, length.out = 100)
mu_prior_matrix <- matrix(nrow = 1000, ncol = 100)

for (i in seq_along(grid)) {
  mu_prior_matrix[, i] <- exp(prior$beta0 + prior$beta1 * (grid[i] - prior$x)) + 22
}

mu_mean <- apply(mu_prior_matrix, 2, mean)
mu_qts <- t(apply(mu_prior_matrix, 2, function(x) quantile(x, c(0.025, 0.975))))
mu_qts2 <- t(apply(mu_prior_matrix, 2, function(x) quantile(x, c(0.25, 0.75))))

data_mu_prior <- data.frame(
  x = grid, 
  y = mu_mean,
  lower_95 = mu_qts[, 1],
  upper_95 = mu_qts[, 2],
  lower_50 = mu_qts2[, 1],
  upper_50 = mu_qts2[, 2]
)

ggplot(data_mu_prior) +
  geom_ribbon(
    aes(x, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6
  ) +
  geom_ribbon(
    aes(x, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6
  ) +
  geom_line(
    aes(x, y), 
    color = "red"
  ) +
  geom_hline(yintercept = c(37.5, 36), color = "green") +
  geom_vline(xintercept = c(5.83), color = "blue") + theme_bw() +
  scale_x_continuous(breaks = c(4, 5.83, 8, 10, 12, 14, 16, 18, 20, 22, 24),
                     labels = c("4:00", "5:53", "8:00", "10:00",
                                "12:00", "14:00", "16:00", "18:00",
                                "20:00", "22:00", "00:00"),
                     name = "Hora") +
  scale_y_continuous(name = "Temperatura (°C)", breaks = c(40, 37.5, 36, 35, 32.5, 30, 27.5, 25, 22)) +
  geom_text(x = 10, y = 36.75, label = "Rango de temperatura inicial", color = "#333333", size = 3) +
  geom_text(x = 5.40, y = 28, label = "Llegada de los policias", angle = 90, color = "#333333", size = 3)


```

En la figura 7 se observa que entre las 4:30 y las 6:00 es donde el cuerpo tiene una temperatura normal para una persona viva, es decir, se está prediciendo a la hora de muerte en ese rango horario.

# Capítulo 3: Doctor formulemelo

Después de volver de la estación de servicio, mientras los demás miembros del equipo sacan fotos y recogen pruebas de la escena, nuestro protagonista observa detenidamente el proceso reflexionando sobre el ambiente. -"¿Hoy es un día lúgubre porque ocurrió un asesinato, u ocurrió un asesinato porque es un día lúgubre?" Pero antes de poder continuar con sus meditaciones, observa atentamente cómo el doctor le toma la temperatura al cadáver antes de envolverlo en una bolsa de óbito. -"Esta vez tiene una temperatura de 30.5 ºC." dice el doctor con súbito sosiego. -"Ahora lo transportan a la morgue en Capital para que le hagan la autopsia. ¿Querés los resultados de la autopsia?". "Bueno doc, cuando los tengas mandámelos.". Al tener todos los datos que creía necesario, Guido suspira con anticipo y se dirige al auto para que lo devuelvan a su casa.

## *Posterior* de los parámetros con una observación

Si se utiliza toda la información postulada en el capítulo 2, se puede plantear el siguiente modelo con los supuestos detallados en el mismo capítulo.

$$Y_i|\beta_0, \beta_1, h_m,\sigma \sim Normal(\mu_i,\sigma)$$ Con: $\mu_i = \beta_0 + \beta_1 (h_i-h_m)$

La temperatura del cuerpo a las 6:45 es de 32.8 ºC, es decir, $h_1=6.75$ y $Y_1=ln(32.8-22)=2.55$. Entonces, se obtiene la distribución a posteriori del modelo al incorporar esta información. Esto se logra mediante la aplicación del algoritmo Hamiltonian Montecarlo a través del lenguaje Stan.

```{r, echo = FALSE, fig.cap = "Trazas de las cadenas de cada parámetro para el modelo con una observación"}
load("posteriors_stan.Rdata")
modelo1obs %>% 
  setNames(c("Beta 0", "Beta1", "Sigma", "Hora de la muerte", "5", "6", "7", "8"))  %>% 
  traceplot(pars = c("b0", "b1", "sigma", "x")) + labs(colour="Cadenas")
```

Todos los parámetros tienen un $\hat{R}$ igual a 1, por lo que las distintas cadenas convergen a la misma distribución. Además, las trazas para cada cadena parece seguir un orden aleatorio por lo que se considera que la muestra extraída es representativa de la distribución del *posterior*. Algunas medidas de las muestras extraídas son:

```{=tex}
\begin{table}[H]
\begin{center}
\begin{tabular}{|l|l|l|l|l|}
\hline
Parámetro & 2.5\% & Media & 97.5\% & $N_{eff}$ \\ \hline
$\beta_0$ & 2.67  & 2.7   & 2.73   & 8002       \\ \hline
$\beta_1$ & -0.27 & -0.23 & -0.22  & 1694       \\ \hline
$\sigma$  & 0     & 0.01  & 0.02   & 1981       \\ \hline
$h_m$     & 5.06  & 5.35  & 5.58   & 2636       \\ \hline
\end{tabular}
\caption{Estadísticas del $\textit{posterior}$ de cada parámetro con una observación}
\label{table:1}
\end{center}
\end{table}
```
Una vez ajustado el modelo, consecuentemente se obtiene la distribución a posteriori de la hora de muerte de Sergio.

```{r, echo = FALSE, fig.cap = "Distribución a posteriori de la hora de muerte"}
posterior1 <- data.frame(extract(modelo1obs, c("b0", "b1", "x" ,"sigma")), observaciones = "1 observación")
set.seed(123)
gamma_1 = -rgamma(27000,shape = 5, scale = .1)+5.883


grafico_post_x_1 = data.frame(x = c(as.numeric(posterior1$x),gamma_1), color = rep(c("Posterior", "Prior"), each = 27000))

ggplot(grafico_post_x_1)+ geom_density(aes(x = x, fill = color), alpha = 0.5) + 
  scale_fill_discrete(name = "", labels = c("1 observación", "Prior")) + scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Hora de la muerte",
                     breaks = c(3.5, 4, 4.5, 5, 5.5, 5.883),
                     labels = c("3:30", "4:00", "4:30",
                                "5:00", "5:30", "5:52")) +
  theme(legend.position = "top") + theme_bw()

ic_1 = quantile(posterior1$x,c(.025, .5,.975))


```

Utilizando solo la primera medición de la temperatura del cuerpo, con una probabilidad del 95%, la hora de muerte se encuentra entre las 5:04 y las 5:35, y su mediana es las 5:21.

Al incorporar nueva información, se redujo la incertidumbre sobre la hora de muerte de Sergio, pero al usar tan solo una observación, realmente no se puede obtener una mejoría sustancial de la creencia de los parámetros $\beta_0$, $\beta_1$ y $\sigma$, ya que estos necesitan más de una observación para poder ser estimados correctamente, y por lo tanto, reducir la incerteza sobre ellos.

```{r, echo = FALSE, fig.cap = "Distribución a posteriori de beta0"}
grafico_post_b0_1 = data.frame(x = c(as.numeric(posterior1$b0),rnorm(27000,2.69,0.017)), color = rep(c("Posterior", "Prior"), each = 27000))

ggplot(grafico_post_b0_1)+ geom_density(aes(x = x, fill = color), alpha = 0.5) +  scale_fill_discrete(name = "", labels = c("1 observación", "Prior")) + scale_x_continuous(name = "Beta0") + scale_y_continuous(name = "Densidad") + theme_bw() + theme(legend.position = "top")

```

```{r, echo = FALSE, fig.cap = "Distribución a posteriori de beta1"}
grafico_post_b1_1 = data.frame(x = c(as.numeric(posterior1$b1),rnorm(27000,-0.248,0.018)), color = rep(c("Posterior", "Prior"), each = 27000))

ggplot(grafico_post_b1_1)+ geom_density(aes(x = x, fill = color), alpha = 0.5) + 
  scale_fill_discrete(name = "", labels = c("1 observación", "Prior")) + scale_x_continuous(name = "Beta1") +
  scale_y_continuous(name = "Densidad") + theme_bw() +
  theme(legend.position = "top")

```

```{r, echo = FALSE, fig.cap = "Distribución a posteriori del error de medición"}
grafico_post_sigma_1 = data.frame(x = c(as.numeric(posterior1$sigma),abs(rnorm(27000, 0 ,0.01))), color = rep(c("Posterior", "Prior"), each = 27000))

ggplot(grafico_post_sigma_1)+ geom_density(aes(x = x, fill = color), alpha = 0.5) + 
  scale_fill_discrete(name = "", labels = c("1 observación", "Prior")) + scale_x_continuous(name = "Sigma") +
  scale_y_continuous(name = "Densidad") +  theme_bw() +
  theme(legend.position = "top")

```

Al actualizar el modelo con una observación y realizar la transformación necesaria para volver a la escala original, se obtiene la siguiente predicción de la temperatura de Sergio a través del tiempo.

```{r, echo = FALSE, fig.cap = "Temperatura del cuerpo de Sergio incorporando una observación al modelo"}
predicciones1 <- data.frame(y = exp(extract(modelo1obs, "log_dif_temp")$log_dif_temp) + 22, x = 6.75)

x_grid <- seq(4, 24, length.out = 100)
mu_matrix <- matrix(nrow = 27000, ncol = 100)

for (i in seq_along(x_grid)) {
  mu_matrix[, i] <- exp(posterior1$b0 + posterior1$b1 * (x_grid[i] - posterior1$x)) + 22
}

mu_mean <- apply(mu_matrix, 2, mean)
mu_qts <- t(apply(mu_matrix, 2, function(x) quantile(x, c(0.025, 0.975))))
mu_qts2 <- t(apply(mu_matrix, 2, function(x) quantile(x, c(0.25, 0.75))))

data_mu <- data.frame(
  x = x_grid, 
  y = mu_mean,
  lower_95 = mu_qts[, 1],
  upper_95 = mu_qts[, 2],
  lower_50 = mu_qts2[, 1],
  upper_50 = mu_qts2[, 2]
)

ggplot() + 
  geom_ribbon(
    aes(x, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6,
    data = data_mu
  ) +
  geom_ribbon(
    aes(x, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6,
    data = data_mu
  ) +
  geom_line(
    aes(x, y), 
    color = "firebrick",
    data = data_mu
  ) +
  scale_y_continuous(breaks = seq(22, 44, 2),
                     name = "Temperatura (ºC)") + 
  scale_x_continuous(limits = c(4, 24), breaks = seq(4, 24, 2), 
                     labels = c("4:00", "6:00", "8:00", "10:00",
                                "12:00", "14:00", "16:00", "18:00", "20:00", "22:00", "00:00"), 
                     name = "Hora") +
  geom_point(aes(x = c(6.75), y = c(32.8)),
             shape = 13, size = 2, color = "red") +
  theme_bw()
```

Al tener una sola observación, no se puede obtener una representación fidedigna de la hora de muerte.

# Capítulo 4: Crónica de una catástrofe bayesiana

Luego de volver a su casa Guido se prepara un café y comienza a armar el informe sobre el caso. Utilizando toda la información que recolectó, estimada la hora de muerte de Sergio.  Luego, por la tarde, le llega a su casilla de mail los resultados de la autopsia con una temperatura del cuerpo de 23.7 ºC al momento de hacer la autopsia. Con un semblante de confianza, Guido decide agregar esta observación a su análisis. En menos de lo que canta un gallo, toda su seguridad en sí mismo desaparece inadvertidamente.

## *Posterior* de los parámetros con dos observaciones

En el capítulo anterior se trabajó con toda la información obtenida hasta el capítulo 2, pero es un sinsentido no utilizar la totalidad de lo que se sabe. Incorporando al modelo la segunda observación de 30.5 ºC de temperatura del cuerpo a las 8:15, se obtienen los siguientes resultados.

```{r, echo = FALSE, fig.cap = "Trazas de las cadenas de cada parámetro para el modelo con dos observaciones"}
modelo2obs %>% 
  setNames(c("Beta 0", "Beta1", "Sigma", "Hora de la muerte", "5", "6", "7", "8", "9", "10", "11"))  %>% 
  traceplot(pars = c("b0", "b1", "sigma", "x")) + labs(colour="Cadenas")
```

Todos los parámetros tienen un $\hat{R}$ igual a 1, por lo que las distintas cadenas convergen a la misma distribución. Además, los saltos entre iteraciones parecen hacerse de manera aleatoria por lo que se considera que las muestras extraídas de los *posteriors* son buenas.

```{=tex}
\begin{table}[H]
\begin{center}
\begin{tabular}{|l|l|l|l|l|}
\hline
Parámetro & 2.5\% & Media & 97.5\% & $N_{eff}$ \\ \hline
$\beta_0$ & 2.67  & 2.70   & 2.73   & 9043       \\ \hline
$\beta_1$ & -0.22 & -0.19 & -0.16  & 4989       \\ \hline
$\sigma$  & 0.00    & 0.02  & 0.03   & 5530       \\ \hline
$h_m$     & 4.67  & 5.09  & 5.49   & 5222       \\ \hline
\end{tabular}
\caption{Estadísticas del $\textit{posterior}$ de cada parámetro con dos observaciones}
\label{table:1}
\end{center}
\end{table}
```
Para observar mejor los cambios de los *posteriors* entre el modelo ajustado con una observación y el ajustado con dos, se presentan los siguientes gráficos:

```{r, echo = FALSE, fig.cap = "Comparación de los posteriors"}
posterior2 <- data.frame(extract(modelo2obs, c("b0", "b1", "x" ,"sigma")), observaciones = "2 observaciones")
posterior12 <- rbind(posterior1, posterior2)
# posterior12_comb = data.frame(x = c(posterior1$b0, posterior1$b1, posterior1$sigma, posterior1$x, posterior2$b0, posterior2$b1, posterior2$sigma, posterior2$x), observaciones = rep(c("1 observación","2 observaciones"), each = 27000*4), parametro = rep(rep(c("b0", "b1", "x" ,"sigma"), each = 27000), times = 2))


plot_post12_1 = ggplot(posterior12) + 
  aes(x = b0, fill = observaciones) +
  geom_density(alpha = 0.5) + 
  scale_fill_discrete(name = "") +
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Beta 0") +
  theme_bw() +
  theme(legend.position = "top")

plot_post12_2 = ggplot(posterior12) +
  aes(x = b1, fill = observaciones) + 
  geom_density(alpha = 0.5) +
  scale_fill_discrete(name = "") + 
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Beta 1") +
  theme_bw() +
  theme(legend.position = "top") 

plot_post12_3 = ggplot(posterior12) +
  aes(x = sigma, fill = observaciones) +
  geom_density(alpha = 0.5) +
  scale_fill_discrete(name = "") +
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Sigma") +
  theme_bw() +
  theme(legend.position = "top")

plot_post12_4 = ggplot(posterior12) +
  aes(x = x, fill = observaciones) +
  geom_density(alpha = 0.5) +
  scale_fill_discrete(name = "") +
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Hora de muerte") + 
  theme_bw() +
  theme(legend.position = "top")

grid.arrange(plot_post12_1,plot_post12_2,plot_post12_3,plot_post12_4)

ic_2 = quantile(posterior2$x, c(.025, .5, .975))
```

En la figura 15 se observa que los *posteriors* de $\beta_1$, $\sigma$ y la hora de muerte cambian sustancialmente. La distribución de $\beta_1$ se traslada hacia la derecha, por lo que la velocidad a la que el cuerpo pierde calor es menor. A la distribución de $\sigma$ le ocurre lo mismo, por lo que el error de medición será más grande. Y por último, la creencia de la hora de muerte se ve desplazada a la izquierda y se torna más variable, por lo tanto, el nuevo intervalo de confianza para ella será de las 4:40 y las 5:29.

Al actualizar el modelo con la segunda observación y realizar la transformación necesaria para volver a la escala original, se obtiene la siguiente predicción de la temperatura de Sergio a través del tiempo.

```{r, echo = FALSE, fig.cap = "Temperatura del cuerpo de Sergio incorporando dos obserciones al modelo"}
predicciones2 <- data.frame(y = exp(extract(modelo2obs, "log_dif_temp")$log_dif_temp[,1]) + 22, x = 6.75)
predicciones2 <- rbind(data.frame(y = exp(extract(modelo2obs, "log_dif_temp")$log_dif_temp[,2]) + 22, x = 8.25), predicciones2)

x_grid2 <- seq(4, 24, length.out = 200)
mu_matrix2 <- matrix(nrow = 27000, ncol = 200)

for (i in seq_along(x_grid2)) {
  mu_matrix2[, i] <- exp(posterior2$b0 + posterior2$b1 * (x_grid2[i] - posterior2$x)) + 22
}

mu_mean2 <- apply(mu_matrix2, 2, mean)
mu_qts2 <- t(apply(mu_matrix2, 2, function(x) quantile(x, c(0.025, 0.975))))
mu_qts22 <- t(apply(mu_matrix2, 2, function(x) quantile(x, c(0.25, 0.75))))

data_mu2 <- data.frame(
  x = x_grid2, 
  y = mu_mean2,
  lower_95 = mu_qts2[, 1],
  upper_95 = mu_qts2[, 2],
  lower_50 = mu_qts22[, 1],
  upper_50 = mu_qts22[, 2]
)

# ------------ SIN ZOOM -----------------

ggplot() + 
  geom_ribbon(
    aes(x, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6,
    data = data_mu2
  ) +
  geom_ribbon(
    aes(x, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6,
    data = data_mu2
  ) +
  geom_line(
    aes(x, y), 
    color = "firebrick",
    data = data_mu2
  ) +
  scale_y_continuous(breaks = seq(22, 44, 2),
                     name = "Temperatura (ºC)") + 
  scale_x_continuous(limits = c(4, 24), breaks = seq(4, 24, 2), 
                     labels = c("4:00", "6:00", "8:00", "10:00",
                                "12:00", "14:00", "16:00","18:00",
                                "20:00", "22:00", "00:00"), 
                     name = "Hora") +
  geom_point(aes(x = c(6.75, 8.25), y = c(32.8, 30.5)),
             shape = 13, size = 2, color = "red") +
  theme_bw()

```

Para garantizar de que el ajuste es correcto, se realiza una validación interna donde se obtienen réplicas de la medición de la temperatura para distintas temperaturas posibles del cuerpo de Sergio en el momento que se obtuvieron los datos reales y comparándolos.

```{r, echo = FALSE, fig.cap = "Validación interna de los datos observados", warning = FALSE}
# ----------- CON ZOOM ------------------
ggplot() + 
  geom_ribbon(
    aes(x, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6,
    data = data_mu2
  ) +
  geom_ribbon(
    aes(x, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6,
    data = data_mu2
  ) +
  geom_line(
    aes(x, y), 
    color = "firebrick",
    data = data_mu2
  ) +
  stat_summary(data = predicciones2, fun.data = mean_sdl,
               mapping = aes(x = x, y = y), color = "darkgreen", size = 0.5) +
  scale_y_continuous(name = "Temperatura (°C)",
                     breaks = c(42.5, 40, 37.5, 36, 35,
                                32.5, 30, 27.5, 25, 22),
                     limits = c(27, 36)) +
  scale_x_continuous(limits = c(6.5, 8.5), breaks = seq(6, 9, 0.5), 
                     labels = c("6:00", "6:30", "7:00", "7:30",
                                "8:00", "8:30", "9:00"), 
                     name = "Hora") +
  geom_point(aes(x = c(6.75, 8.25), y = c(32.8, 30.5)),
             shape = 13, size = 2, color = "red") +
  theme_bw()
```

Al estar los puntos reales contenidos adentro de la distribución de las réplicas del conjunto de datos, se considera válido el ajuste.

## *Posterior* de los parámetros con tres observaciones

Teniendo en cuenta la idea de usar toda la información uno podría pensar en utilizar la última temperatura brindada de 23.7 ºC. Primero, se mostrarán los resultados de añadir dicho dato al modelo y luego se explicará por qué, "como Guido predijo", esto no es una sabia decisión.

```{r, echo = FALSE, fig.cap = "Trazas de las cadenas de cada parámetro para el modelo con tres observaciones"}
modelo3obs %>%
  setNames(c("Beta 0", "Beta1", "Sigma", "Hora de la muerte", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14"))  %>%
  traceplot(pars = c("b0", "b1", "sigma", "x")) + labs(colour="Cadenas")
```

Todos los parámetros tienen un $\hat{R}$ igual a 1, por lo que las distintas cadenas convergen a la misma distribución. Las trazas de cada cadena parecieran distribuirse aleatoriamente por el espacio de probabilidades logrando así una buena representatividad del *posterior*. Algunas de las características de dichas distribuciones son las siguientes:

```{=tex}
\begin{table}[H]
\begin{center}
\begin{tabular}{|l|l|l|l|l|}
\hline
Parámetro & 2.5\% & Media & 97.5\% & $N_{eff}$ \\ \hline
$\beta_0$ & 2.67  & 2.70   & 2.72   & 14439       \\ \hline
$\beta_1$ & -0.28 & -0.27 & -0.25  & 11956       \\ \hline
$\sigma$  & 0.03    & 0.04  & 0.05   & 13525       \\ \hline
$h_m$     & 5.29  & 5.55  & 5.75   & 11634       \\ \hline
\end{tabular}
\caption{Estadísticas del $\textit{posterior}$ de cada parámetro con dos observaciones}
\label{table:1}
\end{center}
\end{table}
```
En un principio, no se ve nada raro con las estimaciones del *posterior* en este nuevo modelo. Por lo que se procede a compararlo con el anterior modelo:

```{r, echo = FALSE, fig.cap = "Comparación de los posteriors"}
posterior3 <- data.frame(extract(modelo3obs, c("b0", "b1", "x" ,"sigma")), observaciones = "3 observaciones")
posterior23 <- rbind(posterior2, posterior3)


plot_post23_1 = ggplot(posterior23) + 
  aes(x = b0, fill = observaciones) +
  geom_density(alpha = 0.5) + 
  scale_fill_discrete(name = "") +
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Beta 0") +
  theme_bw() +
  theme(legend.position = "top")

plot_post23_2 = ggplot(posterior23) +
  aes(x = b1, fill = observaciones) + 
  geom_density(alpha = 0.5) +
  scale_fill_discrete(name = "") + 
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Beta 1") +
  theme_bw() +
  theme(legend.position = "top") 

plot_post23_3 = ggplot(posterior23) +
  aes(x = sigma, fill = observaciones) +
  geom_density(alpha = 0.5) +
  scale_fill_discrete(name = "") +
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Sigma") +
  theme_bw() +
  theme(legend.position = "top")

plot_post23_4 = ggplot(posterior23) +
  aes(x = x, fill = observaciones) +
  geom_density(alpha = 0.5) +
  scale_fill_discrete(name = "") +
  scale_y_continuous(name = "Densidad") +
  scale_x_continuous(name = "Hora de muerte") + 
  theme_bw() +
  theme(legend.position = "top")

grid.arrange(plot_post23_1,plot_post23_2,plot_post23_3,plot_post23_4)

ic_3 = quantile(posterior3$x, c(.025, .5, .975))
```

Los *posteriors* de ambos modelos se encuentran muy desplazados entre sí, exceptuando el del $\beta_0$, sucediendo esto al agregar un solo dato más. La distribución del $\beta_1$ se encuentra muy desplazada a valores menores en este nuevo modelo, es decir, el intercambio de temperatura del cuerpo con el ambiente es más rápido. La distribución de $\sigma$ se encuentra desplazada a la derecha, lo que implica que el error de medición podría llegar a ser mayor al que se pensaba. Por último, la hora de muerte se ve desplazada a horarios más cercanos al punto de encuentro con el cadaver, influenciado por la nueva estimación de un descenso rápido en su temperatura. Esta nueva estimación de la hora de muerte garantiza que el hecho se concretó entre las 5:17 y las 5:44.

Estos grandes cambios al actualizar el *posterior* con un único dato no se deben pasar por alto, ya que no resultan del todo lógico, por lo que se procede a hacer una validación interna del modelo.

```{r}
predicciones3 <- data.frame(y = exp(extract(modelo3obs, "log_dif_temp")$log_dif_temp[,1]) + 22, x = 6.75)
predicciones3 <- rbind(data.frame(y = exp(extract(modelo3obs, "log_dif_temp")$log_dif_temp[,2]) + 22, x = 8.25), predicciones3)
predicciones3 <- rbind(data.frame(y = exp(extract(modelo3obs, "log_dif_temp")$log_dif_temp[,3]) + 22, x = 13.5), predicciones3)

x_grid3 <- seq(4, 24, length.out = 200)
mu_matrix3 <- matrix(nrow = 27000, ncol = 200)

for (i in seq_along(x_grid3)) {
  mu_matrix3[, i] <- exp(posterior3$b0 + posterior3$b1 * (x_grid3[i] - posterior3$x)) + 22
}

mu_mean3 <- apply(mu_matrix3, 2, mean)
mu_qts3 <- t(apply(mu_matrix3, 2, function(x) quantile(x, c(0.025, 0.975))))
mu_qts23 <- t(apply(mu_matrix3, 2, function(x) quantile(x, c(0.25, 0.75))))

data_mu3 <- data.frame(
  x = x_grid3, 
  y = mu_mean3,
  lower_95 = mu_qts3[, 1],
  upper_95 = mu_qts3[, 2],
  lower_50 = mu_qts23[, 1],
  upper_50 = mu_qts23[, 2]
)

ggplot() + 
  geom_ribbon(
    aes(x, ymin = lower_95, ymax = upper_95),
    fill = "grey50",
    alpha = 0.6,
    data = data_mu3
  ) +
  geom_ribbon(
    aes(x, ymin = lower_50, ymax = upper_50),
    fill = "grey35",
    alpha = 0.6,
    data = data_mu3
  ) +
  geom_line(
    aes(x, y), 
    color = "firebrick",
    data = data_mu3
  ) +
  stat_summary(data = predicciones3, fun.data = mean_sdl,
               mapping = aes(x = x, y = y), color = "blue", size = 0.5) +
  scale_y_continuous(name = "Temperatura (°C)",
                     breaks = c(42.5, 40, 37.5, 36, 35,
                                32.5, 30, 27.5, 25, 22),
                     limits = c(23, 36.5)) +
  scale_x_continuous(limits = c(6, 14), breaks = seq(6, 14, 2), 
                     labels = c("6:00", "8:00", "10:00", "12:00", "14:00"), 
                     name = "Hora") +
  geom_point(aes(x = c(6.75, 8.25, 13.5), y = c(32.8, 30.5, 23.7)),
             shape = 13, size = 2, color = "red") +
  theme_bw()

```

Según el modelo con 3 observaciones, la distribución de la temperatura del cuerpo de Sergio estimada no coincide con los datos observados. Esto es un indicio de que el modelo planteado no se ajusta bien al comportamiento observado. Puede haber dos razones para explicar este malfuncionamiento del modelo: la primera es que alguno/s de los datos observados son erróneos, por ejemplo, el cuerpo fue expuesto a diferentes condiciones que modifican el intercambio de temperatura con el ambiente, y la segunda razón, que el modelo planteado no sea correcto para representar dicho intercambio.

# Capítulo 5: "D.e.a.t.h." Divagaciones entre aficionados tanteando hipótesis  

"-Quien hubiera pensado que la muerte fuera tan compleja." dice Guido sarcásticamente, castigándose a si mismo por no haber podido contener a su propia desmedida arrogancia de ser motivo de semejante desidia. Sintiéndose tonto por pensar que en su primer trabajo todo iba a salir bien, Guido continua trabajando hasta tarde para poder entregar su informe a tiempo.




Indudablemente, el modelo con 3 observaciones no es uno que se pueda usar para realizar una estimación certera de la hora muerte. Una de las posibles causas es que la última medición de la temperatura de Sergio no es verídica. Al cambiar las condiciones donde el cuerpo reside y además perder el seguimiento hasta su autopsia, las posibilidades de que la última medición sea incorrecta son altas.

O bien, en el caso de que las tres observaciones sean verídicas, el planteamiento teórico del modelo y del intercambio de temperatura pueden llegar a ser erróneos, por lo que los datos observados no pueden tomar la forma que se espera.

Por lo postulado anteriormente, de los tres modelos planteados, el mejor podría llegar a ser aquel que utiliza 2 observaciones, aunque no existe seguridad alguna de ello.

Adicionalmente, todos los modelos propuestos suponen que Sergio se encontraba en un estado saludable al momento de morir. El incumplimiento de dicha suposición puede perjudicar las estimaciones al usar distribuciones a *priori* incorrectas. En este caso, sería correcto aumentar la incertidumbre sobre el $\beta_0$, además de que la construcción de los posibles valores para $\beta_1$, por cómo se estima en este trabajo, cambiaría porque dependen del $\beta_0$.

Entonces, ¿Cuándo murió Sergio?

# Epílogo: ¡Y Guido pudo salir!

Luego de entregar su informe, Guido sintió una sensación ambivalente de satisfacción y disconformidad "-Al menos ya todo terminó." dice el fatigado estudiante y sin ningún tipo de reparo en su vestimenta, se desploma en su lecho para poder tener una ganadas horas de sueño.


## Conclusiones




